<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://portfolio.lixlim.com/blog</id>
    <title>Portfolio-docs Blog</title>
    <updated>2025-08-09T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://portfolio.lixlim.com/blog"/>
    <subtitle>Portfolio-docs Blog</subtitle>
    <icon>https://portfolio.lixlim.com/img/lixlim_logo_white.png</icon>
    <entry>
        <title type="html"><![CDATA[WindowsとLinuxのファイルシステムの違いでエラーに遭遇した話]]></title>
        <id>https://portfolio.lixlim.com/blog/2025-08-09-1</id>
        <link href="https://portfolio.lixlim.com/blog/2025-08-09-1"/>
        <updated>2025-08-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Java Spring Batchの動作で、入力されたファイルを5つに分けて処理を行い、保存した5つのファイルをFiles.walkで読み取りをして一つのファイルにまとめるというメソッドがあった。しかし、これがいざ本番反映前のテストではファイルが想定順番ではなく、ランダムで順番が入れ替わるという現象が起こり、これの改修の依頼が僕に来た。]]></summary>
        <content type="html"><![CDATA[<p>Java Spring Batchの動作で、入力されたファイルを5つに分けて処理を行い、保存した5つのファイルをFiles.walkで読み取りをして一つのファイルにまとめるというメソッドがあった。しかし、これがいざ本番反映前のテストではファイルが想定順番ではなく、ランダムで順番が入れ替わるという現象が起こり、これの改修の依頼が僕に来た。</p>
<p>既存処理で、Files.walkをsortしていたので、最初はファイルの順番に問題があると思えず、そしてデグレを最小限にするという前提条件があったので、開発リーダーから提案された解決策は、まずバッチ処理にてファイルの読み込みをする際に書く行に番号をつけておき、最終段階で結果ファイルが出力されたら、そのファイルを再度読み込み、あらかじめつけておいた番号順にソートを行い、最終歩アイルを上書きする、という方法だった。既存処理はそのままなので、デグレの影響が一番少ない方法だったけど、ファイルのサイズも大きいので、製造後にパフォーマンスが悪くなっていないかを確認するまでが依頼の内容だった。</p>
<p>ここで僕は、まず実際どの理由で入れ替わりが発生するのかを見るために、バッチ処理話回してみた。その結果は、「あれ?順番通りに出力されるけど?」ということになってて、変だな・・・と思いましがらリーダーに相談をした。リーダーさんの意見は、「再現できないのは気持ち悪いけど、まず依頼した通りにソートを入れておけば、原因が分からなくても解決はできる」という内容だった。
それで、僕はまずローカル上でソートを実装し、検証環境でのテストを実施した。
検証環境での実施の際に、念の為、古いソースでテストを行なったけど、なんと、順番が入れ替わる現象が再現され、急いて報告をし、その原因を探った。</p>
<p>結論から言うと、ローカル環境はWindowsで、ファイルシステムはNTFS、ファイルインデックスはMFTを使っていて、これの場合、ファイルが生成された順とほぼ同じ順番にFiles.walkで読み込まれるらしい。これでローカルのテストでは毎回同じファイル順番で読み込まれるので再現ができなかった。
一方で、検証環境はLinuxで、ファイルシステムはext4、ファイルインデックスはinode/Htreeを使っていて、これの場合、ハッシュを用いてインデックスを作るので、ほぼランダム順にFiles.walkで読み込まれるということ。</p>
<p>ここまで原因がわかったらもう解決は簡単。既存のFiles.walkのsortに問題があることが特定できたので、これを改修して作業を完了した。
という話。</p>]]></content>
        <category label="windows" term="windows"/>
        <category label="linux" term="linux"/>
        <category label="MFT" term="MFT"/>
        <category label="Htree" term="Htree"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonスクリプトをexeファイルにしようとした話]]></title>
        <id>https://portfolio.lixlim.com/blog/2025-07-03-1</id>
        <link href="https://portfolio.lixlim.com/blog/2025-07-03-1"/>
        <updated>2025-07-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[基本的に仕事中に、自動化ができそうな作業があると、必ずスクリプトなどを使って自動化または半自動化をするようにしている。]]></summary>
        <content type="html"><![CDATA[<p>基本的に仕事中に、自動化ができそうな作業があると、必ずスクリプトなどを使って自動化または半自動化をするようにしている。
そして、同僚たちが使うことを想定し、できる限りワンクリックで実行可能な状態にするのが正解だと信じている。</p>
<p>そのため、windows環境の場合はできる限りbatファイルで作成する。
powershellはより便利ではあるが、セキュリティ上の制約があって、気軽には使えない。
(そのため、batファイルの中からpowershellスクリプトを呼び出すという方法を使う場合もある)
そして、Linux環境上のツールが必要だった場合はbashのシェルスクリプトを使うようにしている。</p>
<p>そして、今回、aws関連のツールを作成したので、awsのsdkを使うために、pythonのスクリプトを作成することになった。
作成したはいいものの、問題が一つある。
これは僕一人が使うものではなく、今後他の人も使うことが想定されているものなので、できる限り簡単な使い方ができるようにしたい。
その場合、pythonスクリプトのままでpythonコマンドで実行するのは少し面倒だ。
だって依存性などもpipでインストールする必要があるし・・・</p>
<p>そこで思いついたのは、pyinstallerやnuitkaなどを使い、pythonスクリプトをexeファイルにして使わせればより簡単な使い方になるかな、と。
ここでpyinstallerには大きな問題があった。
過去の経験から、pyinstallerで作ったexeファイルは、実行されるまでとても長く待たされる、ということ。
これはおそらくだが、パソコンのセキュリティソフトがこのexeファイルを検査するのに時間がかかるのだと思われる。
問題は毎回実行するたびに時間がかかるので、何分もかかるので、使い物にはならないということ。</p>
<p>それで、nuitkaのような、pythonコードをC++コードに変換してコンパイルした場合はどうなのか気になったので挑戦してみた。</p>
<p>ここで発覚したnuitkaの難点。</p>
<ul>
<li>python 3.13バージョンにまだちゃんと対応できていない。</li>
<li>C++のコンパイラが別途必要になる。</li>
<li>クロスフラットフォームに対応しておらず、wsl上で作成するとLinux専用になってしまう。
など・・・</li>
</ul>
<p>これじゃnuitkaも難しそう・・・。
明日もうちょい方法を探ってみよう。</p>]]></content>
        <category label="python" term="python"/>
        <category label="pyinstaller" term="pyinstaller"/>
        <category label="nuitka" term="nuitka"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docusaurusサイト開設]]></title>
        <id>https://portfolio.lixlim.com/blog/2025-06-11-1</id>
        <link href="https://portfolio.lixlim.com/blog/2025-06-11-1"/>
        <updated>2025-06-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ポートフォリオ資料を載せるための、SSG(with Docusaurus)サイト作成中・・・]]></summary>
        <content type="html"><![CDATA[<p>ポートフォリオ資料を載せるための、SSG(with Docusaurus)サイト作成中・・・</p>]]></content>
        <category label="SSG" term="SSG"/>
        <category label="Docusaurus" term="Docusaurus"/>
    </entry>
</feed>